gui:
    scrollHeight: 2 # how many lines you scroll by
    scrollPastBottom: true # enable scrolling past the bottom
    sidePanelWidth: 0.27 # number from 0 to 1
    expandFocusedSidePanel: false
    mainPanelSplitMode: "flexible" # one of 'horizontal' | 'flexible' | 'vertical'
    language: "en" # one of 'auto' | 'en' | 'zh' | 'pl' | 'nl'
    border: "hidden" # one of 'single' | 'double' | 'rounded' | 'hidden'
    theme:
        activeBorderColor:
            - green
            - bold
        inactiveBorderColor:
            - black
        optionsTextColor:
            - black
        selectedLineBgColor:
            - black
        cherryPickedCommitBgColor:
            - yellow
        unstagedChangesColor:
            - magenta
        cherryPickedCommitFgColor:
            - magenta
        defaultFgColor:
            - default
    commitLength:
        show: true
    mouseEvents: true
    skipDiscardChangeWarning: false
    skipStashWarning: false
    showFileTree: true # for rendering changes files in a tree format
    showListFooter: true # for seeing the '5 of 20' message in list panels
    showRandomTip: true
    showCommandLog: true
    commandLogSize: 8
    nerdFontsVersion: "3"
    showFileIcons: true
git:
    paging:
        colorArg: always
        pager: delta --dark --paging=never
    commit:
        signOff: false
    merging:
        # only applicable to unix users
        manualCommit: false
        # extra args passed to `git merge`, e.g. --no-ff
        args: ""
    log:
        # one of date-order, author-date-order, topo-order.
        # topo-order makes it easier to read the git log graph, but commits may not
        # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
        order: "topo-order"
        # one of always, never, when-maximised
        # this determines whether the git graph is rendered in the commits panel
        showGraph: "when-maximised"
    skipHookPrefix: WIP
    autoFetch: true
    branchLogCmd: "git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' {{branchName}} --date=short"
    allBranchesLogCmd: "git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --all"
    overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
    disableForcePushing: false
    parseEmoji: false
os:
    editCommand: "nvim {{filename}}" # see 'Configuring File Editing' section
    editCommandTemplate: "{{editor}} {{filename}}"
    editInTerminal: true
    openCommand: "xdg-open {{filename}} >/dev/null"
refresher:
    refreshInterval: 10 # file/submodule refresh interval in seconds
    fetchInterval: 60 # re-fetch interval in seconds
update:
    method: prompt # can be: prompt | background | never
    days: 14 # how often an update is checked for
confirmOnQuit: false
quitOnTopLevelReturn: false
disableStartupPopups: false
notARepository: "prompt" # one of: 'prompt' | 'create' | 'skip'
keybinding:
    universal:
        quit: "q"
        quit-alt1: "<c-c>" # alternative/alias of quit
        return: "<esc>" # return to previous menu, will quit if there's nowhere to return
        quitWithoutChangingDirectory: "Q"
        togglePanel: "<tab>" # goto the next panel
        prevItem: "<up>" # go one line up
        nextItem: "<down>" # go one line down
        prevItem-alt: "k" # go one line up
        nextItem-alt: "j" # go one line down
        prevPage: "," # go to next page in list
        nextPage: "." # go to previous page in list
        gotoTop: "<" # go to top of list
        gotoBottom: ">" # go to bottom of list
        scrollLeft: "H" # scroll left within list view
        scrollRight: "L" # scroll right within list view
        prevBlock: "<left>" # goto the previous block / panel
        nextBlock: "<right>" # goto the next block / panel
        prevBlock-alt: "h" # goto the previous block / panel
        nextBlock-alt: "l" # goto the next block / panel
        jumpToBlock: ["1", "2", "3", "4", "5"] # goto the Nth block / panel
        nextMatch: "n"
        prevMatch: "N"
        optionMenu: "x" # show help menu
        optionMenu-alt1: "?" # show help menu
        select: "<space>"
        goInto: "<enter>"
        openRecentRepos: "<c-r>"
        confirm: "<enter>"
        new: "n"
        edit: "e"
        openFile: "o"
        scrollUpMain: "<pgup>" # main panel scroll up
        scrollDownMain: "<pgdown>" # main panel scroll down
        scrollUpMain-alt1: "K" # main panel scroll up
        scrollDownMain-alt1: "J" # main panel scroll down
        scrollUpMain-alt2: "<c-u>" # main panel scroll up
        scrollDownMain-alt2: "<c-d>" # main panel scroll down
        executeCustomCommand: ":"
        createRebaseOptionsMenu: "m"
        pushFiles: "P"
        pullFiles: "p"
        refresh: "R"
        createPatchOptionsMenu: "<c-p>"
        nextTab: "]"
        prevTab: "["
        nextScreenMode: "+"
        prevScreenMode: "_"
        undo: "z"
        redo: "<c-z>"
        filteringMenu: "<c-s>"
        diffingMenu: "W"
        diffingMenu-alt: "<c-e>" # deprecated
        copyToClipboard: "<c-o>"
        submitEditorText: "<enter>"
        extrasMenu: "@"
        toggleWhitespaceInDiffView: "<c-w>"
        increaseContextInDiffView: "}"
        decreaseContextInDiffView: "{"
    status:
        checkForUpdate: "u"
        recentRepos: "<enter>"
    files:
        commitChanges: "c"
        commitChangesWithoutHook: "w" # commit changes without pre-commit hook
        amendLastCommit: "A"
        commitChangesWithEditor: "C"
        ignoreFile: "i"
        refreshFiles: "r"
        stashAllChanges: "s"
        viewStashOptions: "S"
        toggleStagedAll: "a" # stage/unstage all
        viewResetOptions: "D"
        fetch: "f"
        toggleTreeView: "`"
    branches:
        createPullRequest: "o"
        viewPullRequestOptions: "O"
        checkoutBranchByName: "c"
        forceCheckoutBranch: "F"
        rebaseBranch: "r"
        mergeIntoCurrentBranch: "M"
        viewGitFlowOptions: "i"
        fastForward: "f" # fast-forward this branch from its upstream
        pushTag: "P"
        setUpstream: "u" # set as upstream of checked-out branch
        fetchRemote: "f"
    commits:
        squashDown: "s"
        renameCommit: "r"
        renameCommitWithEditor: "R"
        viewResetOptions: "g"
        markCommitAsFixup: "f"
        createFixupCommit: "F" # create fixup commit for this commit
        squashAboveCommits: "S"
        moveDownCommit: "<c-j>" # move commit down one
        moveUpCommit: "<c-k>" # move commit up one
        amendToCommit: "A"
        pickCommit: "p" # pick commit (when mid-rebase)
        revertCommit: "t"
        cherryPickCopy: "c"
        pasteCommits: "v"
        tagCommit: "T"
        checkoutCommit: "<space>"
        resetCherryPick: "<c-R>"
        openLogMenu: "<c-l>"
        viewBisectOptions: "b"
    stash:
        popStash: "g"
    commitFiles:
        checkoutCommitFile: "c"
    main:
        toggleSelectHunk: "a"
        pickBothHunks: "b"
    submodules:
        init: "i"
        update: "u"
        bulkMenu: "b"
customCommands:
    - key: "<c-P>"
      context: "global"
      loadingText: "pushing"
      prompts:
          - type: "input"
            title: "which branch do you want to push to?"
      command: "git push origin {{index .PromptResponses 0}}"
    - key: '<c-p>'
      description: "Pull from a specific remote repository"
      context: 'files'
      loadingText: 'Pulling ...'
      command: git pull {{ .Form.Remote }} {{ .Form.RemoteBranch }}
      prompts:
        - type: 'input'
          key: 'Remote'
          title: "Remote:"
          suggestions:
            preset: 'remotes'
        - type: 'input'
          key: 'RemoteBranch'
          title: "Remote branch:"
          suggestions:
            command: "git branch --remote --list '{{.Form.Remote}}/*' --format='%(refname:short)' | sed 's/{{.Form.Remote}}\\///'"
    - key: "M"
      command: "git mergetool {{ .SelectedFile.Name }}"
      context: "files"
      loadingText: "opening git mergetool"
      subprocess: true
